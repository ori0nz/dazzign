from fastapi import APIRouter, HTTPException, Form, File, UploadFile, Body
from typing import Any, Optional
from typing import Any
from app.schemas import ToSpecRequest, ToSpecResponse, PCCaseAttributes
from app.services import TextGenService
import logging
from pydantic import ValidationError
import base64
logger = logging.getLogger(__name__)
router = APIRouter()

@router.post("/to-spec", response_model=ToSpecResponse)
async def text_to_image(    
    prompt: str = Body(...),                    
    negative_prompt: Optional[str] = Body(None),
    parent_id: Optional[int] = Body(None),      
    image_base64: Optional[str] = Body(None),   
) -> Any:
    """
    Convert free-form text to structured PC case design attributes
    """
    # logger.info(f"prompt: {prompt}")
    # logger.info(f"image_base64: {image_base64}")
    
    if not prompt and not image_base64:
        raise HTTPException(status_code=422, detail="At least one of 'prompt' or 'image_base64' must be provided.")

    try:
        spec_request = ToSpecRequest(
            prompt=prompt,
            negative_prompt=negative_prompt,
            parent_id=parent_id
        )
    except ValidationError as e:
        raise HTTPException(status_code=422, detail=e.errors())
    

    image_attributes = None
    text_attributes = None
    
    if image_base64:
        # todo: mpv stage handle here but need to move to image gen service

        image_base64 = image_base64.split(",")[1]
        try:
            image_output = await TextGenService.text_to_image_attributes(prompt=None, image_base64=image_base64, provider="claude", model_id="us.anthropic.claude-3-7-sonnet-20250219-v1:0")
            image_attributes = image_output.attributes
        except Exception as e:
            logger.error(f"Error in image-to-attributes conversion: {e}")
            raise HTTPException(
                status_code=500,
                detail="Failed to process image-to-attributes conversion"
            )

    if prompt:
        try:
            # Process the prompt through LLM to extract attributes
            text_output = await TextGenService.text_to_image_attributes(spec_request.prompt, provider="nova", model_id="us.amazon.nova-pro-v1:0")
            text_attributes = text_output.attributes
        except Exception as e:
            logger.error(f"Error in text-to-image conversion: {e}")
            raise HTTPException(
                status_code=500,
                detail="Failed to process text-to-image conversion"
            ) 
    
    logger.info(f"text_attributes: {text_attributes}")
    logger.info(f"image_attributes: {image_attributes}")

    response = {
            "prompt": prompt,
            "attributes": "",
            "structured_prompt": ""
        }
        
    if image_attributes and text_attributes:
        merged_attributes = await TextGenService.merge_attributes(text_attributes, image_attributes)
        logger.info(f"merged_attributes: {merged_attributes}")
        response["attributes"] = merged_attributes
        
        return response
    
    elif image_attributes:
        response["attributes"] = image_attributes
        response["prompt"] = "generated by image"
        return response
    
    else:
        response["attributes"] = text_attributes
        return response